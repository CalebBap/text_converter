{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\caleb\\\\Google Drive\\\\MSA\\\\notes_converter\\\\notes_converter_app\\\\src\\\\components\\\\displayText.js\";\nimport React from 'react';\n\nclass displayText extends React.Component {\n  constructor(props) {\n    super(props);\n    this.text_ref = React.createRef();\n    this.text = \"Open the menu to scan and add some text...\";\n  }\n  /*checkText = () => {\r\n      const textNode = this.text_ref.current;\r\n      if (textNode.textContent == \"Open the menu to scan and add some text...\") {\r\n          textNode.textContent = \"\";\r\n          textNode.style.color = \"black\";\r\n      }\r\n  }\r\n    lostFocus = () => {\r\n      const textNode = this.text_ref.current;\r\n      if (textNode.textContent != this.text) {\r\n          this.text = textNode.textContent;\r\n      }\r\n      if (textNode.textContent == \"\") {\r\n          this.text = \"Open the menu to scan and add some text...\";\r\n          textNode.textContent = this.text;\r\n          textNode.style.color = \"grey\";\r\n      }\r\n      this.forceUpdate();\r\n  }*/\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      ref: this.text_ref,\n      className: \"mainText\",\n      contentEditable: \"true\",\n      suppressContentEditableWarning: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, global.scannedText));\n  }\n\n}\n\nexport default displayText;","map":{"version":3,"sources":["C:\\Users\\caleb\\Google Drive\\MSA\\notes_converter\\notes_converter_app\\src\\components\\displayText.js"],"names":["React","displayText","Component","constructor","props","text_ref","createRef","text","render","global","scannedText"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAN,SAA0BD,KAAK,CAACE,SAAhC,CAA0C;AAEtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,QAAL,GAAgBL,KAAK,CAACM,SAAN,EAAhB;AACA,SAAKC,IAAL,GAAY,4CAAZ;AACH;AAED;;;;;;;;;;;;;;;;;;;;;AAqBAC,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAII;AAAG,MAAA,GAAG,EAAE,KAAKH,QAAb;AAAuB,MAAA,SAAS,EAAC,UAAjC;AAA4C,MAAA,eAAe,EAAC,MAA5D;AAAmE,MAAA,8BAA8B,EAAE,IAAnG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKI,MAAM,CAACC,WADZ,CAJJ,CADJ;AAUH;;AAxCqC;;AA2C1C,eAAeT,WAAf","sourcesContent":["import React from 'react';\r\n\r\nclass displayText extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.text_ref = React.createRef();\r\n        this.text = \"Open the menu to scan and add some text...\";\r\n    }\r\n\r\n    /*checkText = () => {\r\n        const textNode = this.text_ref.current;\r\n        if (textNode.textContent == \"Open the menu to scan and add some text...\") {\r\n            textNode.textContent = \"\";\r\n            textNode.style.color = \"black\";\r\n        }\r\n    }\r\n\r\n    lostFocus = () => {\r\n        const textNode = this.text_ref.current;\r\n        if (textNode.textContent != this.text) {\r\n            this.text = textNode.textContent;\r\n        }\r\n        if (textNode.textContent == \"\") {\r\n            this.text = \"Open the menu to scan and add some text...\";\r\n            textNode.textContent = this.text;\r\n            textNode.style.color = \"grey\";\r\n        }\r\n        this.forceUpdate();\r\n    }*/\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/*<p ref={this.text_ref} className=\"mainText\" onBlur={this.lostFocus} onClick={this.checkText} contentEditable=\"true\" suppressContentEditableWarning={true}>\r\n                    {global.scannedText}\r\n                </p>*/}\r\n                <p ref={this.text_ref} className=\"mainText\" contentEditable=\"true\" suppressContentEditableWarning={true}>\r\n                    {global.scannedText}\r\n                </p>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default displayText"]},"metadata":{},"sourceType":"module"}