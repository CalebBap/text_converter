{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\caleb\\\\Google Drive\\\\MSA\\\\notes_converter\\\\notes_converter_app\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './components/stylesheet.css';\nimport WebcamComponent from './components/webcamComponent';\nimport DisplayText from './components/displayText';\nimport MenuComponent from './components/menuComponent';\n/*import hamButton from './hamButton.png';\r\nimport crossButton from './crossButton.png';*/\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeScreen = screenNum => {\n      /*switch (this.screen) {\r\n          case 0:\r\n              this.screen += 1;\r\n              break\r\n          case 1:\r\n              this.screen -= 1;\r\n              break\r\n          default:\r\n              break\r\n      }*/\n      if (screenNum == 0) {\n        this.screen = 1;\n      } else if (screenNum == 1) {\n        this.screen = 0;\n      } //this.menu_ref.current.showHamButton();\n\n\n      this.MenuComponent.showHamButton();\n      this.forceUpdate();\n    };\n\n    this.getScreen = () => {\n      return this.screen;\n    };\n\n    this.getTextState = () => {\n      return this.textState;\n    };\n\n    this.setText = () => {\n      console.log(\"setText()\");\n      const textNode = this.text_ref.current;\n      textNode.style.visibility = \"hidden\";\n\n      if (this.textState) {\n        textNode.style.color = \"black\";\n      } else {\n        textNode.style.color = \"grey\";\n      }\n    };\n\n    this.screen = 0;\n    /*this.ham_button_ref = React.createRef();\r\n    this.cross_button_ref = React.createRef();\r\n    this.menu_ref = React.createRef();*/\n    //this.MenuComponent = React.createRef();\n\n    this.menu_ref = React.createRef();\n    this.MenuComponent = this.MenuComponent.bind(this);\n    this.text_ref = React.createRef();\n    this.textState = false;\n    this.text = \"Open the menu to add some text...\";\n  }\n\n  /*selectText = () => {\r\n      console.log(\"Selecting all Text\");\r\n      const textNode = this.text_ref.current;\r\n      document.execCommand(\"copy\", true, null);\r\n  }*/\n\n  /*copyText = () => { \r\n      this.textState = false;\r\n      this.text = \"Open the menu to add some text...\";\r\n      this.setText();\r\n  }*/\n  render() {\n    const screen = this.getScreen(); //const textState = this.getTextState();\n\n    if (screen === 0) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(DisplayText, {\n        ref: this.text_ref,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }), React.createElement(MenuComponent, {\n        ref: this.menu_ref,\n        changeScreen: this.changeScreen(0),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), \" \");\n    }\n\n    if (screen === 1) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(MenuComponent, {\n        ref: this.menu_ref,\n        changeScreen: this.changeScreen(1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), \" \", React.createElement(\"div\", {\n        className: \"webcamContainer\",\n        visibility: \"visible\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(WebcamComponent, {\n        onClick: console.log(\"Clicked\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      })));\n    }\n\n    this.setText(); // NOT WORKING\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\caleb\\Google Drive\\MSA\\notes_converter\\notes_converter_app\\src\\App.js"],"names":["React","Component","WebcamComponent","DisplayText","MenuComponent","App","constructor","props","changeScreen","screenNum","screen","showHamButton","forceUpdate","getScreen","getTextState","textState","setText","console","log","textNode","text_ref","current","style","visibility","color","menu_ref","createRef","bind","text","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './components/stylesheet.css';\r\nimport WebcamComponent from './components/webcamComponent'\r\nimport DisplayText from './components/displayText'\r\nimport MenuComponent from './components/menuComponent'\r\n/*import hamButton from './hamButton.png';\r\nimport crossButton from './crossButton.png';*/\r\n\r\nclass App extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.screen = 0;\r\n        /*this.ham_button_ref = React.createRef();\r\n        this.cross_button_ref = React.createRef();\r\n        this.menu_ref = React.createRef();*/\r\n\r\n        //this.MenuComponent = React.createRef();\r\n        this.menu_ref = React.createRef();\r\n        this.MenuComponent = this.MenuComponent.bind(this); \r\n\r\n        this.text_ref = React.createRef();\r\n        this.textState = false;\r\n        this.text = \"Open the menu to add some text...\"\r\n    }\r\n\r\n    changeScreen = (screenNum) => {\r\n        /*switch (this.screen) {\r\n            case 0:\r\n                this.screen += 1;\r\n                break\r\n            case 1:\r\n                this.screen -= 1;\r\n                break\r\n            default:\r\n                break\r\n        }*/\r\n        if (screenNum == 0) {\r\n            this.screen = 1;\r\n        } else if (screenNum == 1) {\r\n            this.screen = 0;\r\n        }\r\n        //this.menu_ref.current.showHamButton();\r\n        this.MenuComponent.showHamButton();\r\n        this.forceUpdate();\r\n    }\r\n\r\n    getScreen = () => {\r\n        return this.screen;\r\n    }\r\n\r\n    /*showHamButton = () => {\r\n        const hamNode = this.ham_button_ref.current;\r\n        const menuNode = this.menu_ref.current;\r\n        hamNode.style.visibility = \"visible\";\r\n        menuNode.style.visibility = \"hidden\";\r\n        this.forceUpdate();\r\n    }\r\n\r\n    showMenu = () => {\r\n        const hamNode = this.ham_button_ref.current;\r\n        const menuNode = this.menu_ref.current;\r\n        hamNode.style.visibility = \"hidden\";\r\n        menuNode.style.visibility = \"visible\";\r\n        this.forceUpdate();\r\n    }*/\r\n\r\n    getTextState = () => {\r\n        return this.textState;\r\n    }\r\n\r\n    setText = () => {\r\n        console.log(\"setText()\");\r\n        const textNode = this.text_ref.current;\r\n        textNode.style.visibility = \"hidden\";\r\n        if (this.textState) {\r\n            textNode.style.color = \"black\";\r\n        } else {\r\n            textNode.style.color = \"grey\";\r\n        }\r\n    }\r\n\r\n    /*selectText = () => {\r\n        console.log(\"Selecting all Text\");\r\n        const textNode = this.text_ref.current;\r\n        document.execCommand(\"copy\", true, null);\r\n    }*/\r\n\r\n    /*copyText = () => { \r\n        this.textState = false;\r\n        this.text = \"Open the menu to add some text...\";\r\n        this.setText();\r\n    }*/\r\n\r\n    render() {\r\n        const screen = this.getScreen();\r\n        //const textState = this.getTextState();\r\n\r\n        if (screen === 0) {\r\n            return (\r\n                <div >\r\n                    <DisplayText ref={this.text_ref} /> \r\n                    <MenuComponent ref={this.menu_ref} changeScreen={this.changeScreen(0)} /> {/* Differentiate which method gets called depending on screen?*/}\r\n                    {/*\r\n                    <img ref={this.ham_button_ref} className=\"hamImage\" src={hamButton} onClick={this.showMenu} alt=\"\" />\r\n                    <div ref={this.menu_ref} className=\"menu\">\r\n                        <img ref={this.cross_button_ref} className=\"crossImage\" src={crossButton} onClick={this.showHamButton} alt=\"\" />\r\n                        <p className=\"menuText\" id=\"menuOne\" onClick={this.changeScreen}>Scan Text</p>\r\n                        <p className=\"menuText\">View Text</p>\r\n                        <p className=\"menuText\" >Select All Text</p>\r\n                    </div>\r\n                    */}\r\n                </div >\r\n            );\r\n        }\r\n        if (screen === 1) {\r\n            return (\r\n                <div >\r\n                    {/*\r\n                    <img ref={this.ham_button_ref} className=\"hamImage\" src={hamButton} onClick={this.showMenu} alt=\"\" />\r\n                    <div ref={this.menu_ref} className=\"menu\">\r\n                        <img ref={this.cross_button_ref} className=\"crossImage\" src={crossButton} onClick={this.showHamButton} alt=\"\" />\r\n                        <p className=\"menuText\" id=\"menuOne\" >Scan Text</p>\r\n                        <p className=\"menuText\" onClick={this.changeScreen}>View Text</p>\r\n                        <p className=\"menuText\" >Select All Text</p>\r\n                    </div>\r\n                    */}\r\n                    <MenuComponent ref={this.menu_ref} changeScreen={this.changeScreen(1)} /> {/* Differentiate which method gets called depending on screen?*/}\r\n                    <div className=\"webcamContainer\" visibility=\"visible\">\r\n                        <WebcamComponent onClick={console.log(\"Clicked\")} />\r\n                    </div>\r\n                </div >\r\n            );\r\n        }\r\n\r\n        this.setText() ; // NOT WORKING\r\n    }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}