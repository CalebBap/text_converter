{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\caleb\\\\Google Drive\\\\MSA\\\\notes_converter\\\\notes_converter_app\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './components/stylesheet.css';\nimport WebcamComponent from './components/webcamComponent';\nimport DisplayText from './components/displayText';\nimport MenuComponent from './components/menu';\n/*import hamButton from './hamButton.png';\r\nimport crossButton from './crossButton.png';*/\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeScreen = () => {\n      switch (this.screen) {\n        case 0:\n          this.screen += 1;\n          break;\n\n        case 1:\n          this.screen -= 1;\n          break;\n\n        default:\n          break;\n      }\n\n      this.showHamButton();\n      this.forceUpdate();\n    };\n\n    this.getScreen = () => {\n      return this.screen;\n    };\n\n    this.getMenuState = () => {\n      return this.menuState;\n    };\n\n    this.getTextState = () => {\n      return this.textState;\n    };\n\n    this.setText = () => {\n      console.log(\"setText()\");\n      const textNode = this.text_ref.current;\n      textNode.style.visibility = \"hidden\";\n\n      if (this.textState) {\n        textNode.style.color = \"black\";\n      } else {\n        textNode.style.color = \"grey\";\n      }\n    };\n\n    this.screen = 0;\n    /*this.ham_button_ref = React.createRef();\r\n    this.cross_button_ref = React.createRef();\r\n    this.menu_ref = React.createRef();*/\n\n    this.text_ref = React.createRef();\n    this.textState = false;\n    this.text = \"Open the menu to add some text...\";\n  }\n\n  /*selectText = () => {\r\n      console.log(\"Selecting all Text\");\r\n      const textNode = this.text_ref.current;\r\n      document.execCommand(\"copy\", true, null);\r\n  }*/\n\n  /*copyText = () => { \r\n      this.textState = false;\r\n      this.text = \"Open the menu to add some text...\";\r\n      this.setText();\r\n  }*/\n  render() {\n    const screen = this.getScreen();\n    const menuState = this.getMenuState(); //const textState = this.getTextState();\n\n    if (screen === 0) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(DisplayText, {\n        ref: this.text_ref,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), React.createElement(MenuComponent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }));\n    }\n\n    if (screen === 1) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(MenuComponent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"webcamContainer\",\n        visibility: \"visible\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(WebcamComponent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      })));\n    }\n\n    this.setText(); // NOT WORKING\n\n    if (menuState) {\n      this.showMenu();\n    } else {\n      this.showHamButton();\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\caleb\\Google Drive\\MSA\\notes_converter\\notes_converter_app\\src\\App.js"],"names":["React","Component","WebcamComponent","DisplayText","MenuComponent","App","constructor","props","changeScreen","screen","showHamButton","forceUpdate","getScreen","getMenuState","menuState","getTextState","textState","setText","console","log","textNode","text_ref","current","style","visibility","color","createRef","text","render","showMenu"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,6BAAP;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AACA;;;AAGA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAExBK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAWnBC,YAXmB,GAWJ,MAAM;AACjB,cAAQ,KAAKC,MAAb;AACI,aAAK,CAAL;AACI,eAAKA,MAAL,IAAe,CAAf;AACA;;AACJ,aAAK,CAAL;AACI,eAAKA,MAAL,IAAe,CAAf;AACA;;AACJ;AACI;AARR;;AAUA,WAAKC,aAAL;AACA,WAAKC,WAAL;AACH,KAxBkB;;AAAA,SA0BnBC,SA1BmB,GA0BP,MAAM;AACd,aAAO,KAAKH,MAAZ;AACH,KA5BkB;;AAAA,SA8BnBI,YA9BmB,GA8BJ,MAAM;AACjB,aAAO,KAAKC,SAAZ;AACH,KAhCkB;;AAAA,SAkDnBC,YAlDmB,GAkDJ,MAAM;AACjB,aAAO,KAAKC,SAAZ;AACH,KApDkB;;AAAA,SAsDnBC,OAtDmB,GAsDT,MAAM;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,YAAMC,QAAQ,GAAG,KAAKC,QAAL,CAAcC,OAA/B;AACAF,MAAAA,QAAQ,CAACG,KAAT,CAAeC,UAAf,GAA4B,QAA5B;;AACA,UAAI,KAAKR,SAAT,EAAoB;AAChBI,QAAAA,QAAQ,CAACG,KAAT,CAAeE,KAAf,GAAuB,OAAvB;AACH,OAFD,MAEO;AACHL,QAAAA,QAAQ,CAACG,KAAT,CAAeE,KAAf,GAAuB,MAAvB;AACH;AACJ,KA/DkB;;AAEf,SAAKhB,MAAL,GAAc,CAAd;AACA;;;;AAGA,SAAKY,QAAL,GAAgBrB,KAAK,CAAC0B,SAAN,EAAhB;AACA,SAAKV,SAAL,GAAiB,KAAjB;AACA,SAAKW,IAAL,GAAY,mCAAZ;AACH;;AAwDD;;;;;;AAMA;;;;;AAMAC,EAAAA,MAAM,GAAG;AACL,UAAMnB,MAAM,GAAG,KAAKG,SAAL,EAAf;AACA,UAAME,SAAS,GAAG,KAAKD,YAAL,EAAlB,CAFK,CAGL;;AAEA,QAAIJ,MAAM,KAAK,CAAf,EAAkB;AACd,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,WAAD;AAAa,QAAA,GAAG,EAAE,KAAKY,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ;AAeH;;AACD,QAAIZ,MAAM,KAAK,CAAf,EAAkB;AACd,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAUI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVJ,EAWI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAiC,QAAA,UAAU,EAAC,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAXJ,CADJ;AAiBH;;AAED,SAAKQ,OAAL,GA1CK,CA0CY;;AAEjB,QAAIH,SAAJ,EAAe;AACX,WAAKe,QAAL;AACH,KAFD,MAEO;AACH,WAAKnB,aAAL;AACH;AACJ;;AAhIuB;;AAmI5B,eAAeL,GAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport './components/stylesheet.css';\r\nimport WebcamComponent from './components/webcamComponent'\r\nimport DisplayText from './components/displayText'\r\nimport MenuComponent from './components/menu'\r\n/*import hamButton from './hamButton.png';\r\nimport crossButton from './crossButton.png';*/\r\n\r\nclass App extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.screen = 0;\r\n        /*this.ham_button_ref = React.createRef();\r\n        this.cross_button_ref = React.createRef();\r\n        this.menu_ref = React.createRef();*/\r\n        this.text_ref = React.createRef();\r\n        this.textState = false;\r\n        this.text = \"Open the menu to add some text...\"\r\n    }\r\n\r\n    changeScreen = () => {\r\n        switch (this.screen) {\r\n            case 0:\r\n                this.screen += 1;\r\n                break\r\n            case 1:\r\n                this.screen -= 1;\r\n                break\r\n            default:\r\n                break\r\n        }\r\n        this.showHamButton();\r\n        this.forceUpdate();\r\n    }\r\n\r\n    getScreen = () => {\r\n        return this.screen;\r\n    }\r\n\r\n    getMenuState = () => {\r\n        return this.menuState;\r\n    }\r\n\r\n    /*showHamButton = () => {\r\n        const hamNode = this.ham_button_ref.current;\r\n        const menuNode = this.menu_ref.current;\r\n        hamNode.style.visibility = \"visible\";\r\n        menuNode.style.visibility = \"hidden\";\r\n        this.forceUpdate();\r\n    }\r\n\r\n    showMenu = () => {\r\n        const hamNode = this.ham_button_ref.current;\r\n        const menuNode = this.menu_ref.current;\r\n        hamNode.style.visibility = \"hidden\";\r\n        menuNode.style.visibility = \"visible\";\r\n        this.forceUpdate();\r\n    }*/\r\n\r\n    getTextState = () => {\r\n        return this.textState;\r\n    }\r\n\r\n    setText = () => {\r\n        console.log(\"setText()\");\r\n        const textNode = this.text_ref.current;\r\n        textNode.style.visibility = \"hidden\";\r\n        if (this.textState) {\r\n            textNode.style.color = \"black\";\r\n        } else {\r\n            textNode.style.color = \"grey\";\r\n        }\r\n    }\r\n\r\n    /*selectText = () => {\r\n        console.log(\"Selecting all Text\");\r\n        const textNode = this.text_ref.current;\r\n        document.execCommand(\"copy\", true, null);\r\n    }*/\r\n\r\n    /*copyText = () => { \r\n        this.textState = false;\r\n        this.text = \"Open the menu to add some text...\";\r\n        this.setText();\r\n    }*/\r\n\r\n    render() {\r\n        const screen = this.getScreen();\r\n        const menuState = this.getMenuState();\r\n        //const textState = this.getTextState();\r\n\r\n        if (screen === 0) {\r\n            return (\r\n                <div >\r\n                    <DisplayText ref={this.text_ref} /> \r\n                    <MenuComponent/>\r\n                    {/*\r\n                    <img ref={this.ham_button_ref} className=\"hamImage\" src={hamButton} onClick={this.showMenu} alt=\"\" />\r\n                    <div ref={this.menu_ref} className=\"menu\">\r\n                        <img ref={this.cross_button_ref} className=\"crossImage\" src={crossButton} onClick={this.showHamButton} alt=\"\" />\r\n                        <p className=\"menuText\" id=\"menuOne\" onClick={this.changeScreen}>Scan Text</p>\r\n                        <p className=\"menuText\">View Text</p>\r\n                        <p className=\"menuText\" >Select All Text</p>\r\n                    </div>\r\n                    */}\r\n                </div >\r\n            );\r\n        }\r\n        if (screen === 1) {\r\n            return (\r\n                <div >\r\n                    {/*\r\n                    <img ref={this.ham_button_ref} className=\"hamImage\" src={hamButton} onClick={this.showMenu} alt=\"\" />\r\n                    <div ref={this.menu_ref} className=\"menu\">\r\n                        <img ref={this.cross_button_ref} className=\"crossImage\" src={crossButton} onClick={this.showHamButton} alt=\"\" />\r\n                        <p className=\"menuText\" id=\"menuOne\" >Scan Text</p>\r\n                        <p className=\"menuText\" onClick={this.changeScreen}>View Text</p>\r\n                        <p className=\"menuText\" >Select All Text</p>\r\n                    </div>\r\n                    */}\r\n                    <MenuComponent />\r\n                    <div className=\"webcamContainer\" visibility=\"visible\">\r\n                        <WebcamComponent />\r\n                    </div>\r\n                </div >\r\n            );\r\n        }\r\n\r\n        this.setText() ; // NOT WORKING\r\n\r\n        if (menuState) {\r\n            this.showMenu() ;\r\n        } else {\r\n            this.showHamButton() ;\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}