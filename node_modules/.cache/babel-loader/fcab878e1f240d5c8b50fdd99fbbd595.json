{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\caleb\\\\Google Drive\\\\MSA\\\\notes_converter\\\\notes_converter_app\\\\src\\\\components\\\\displayText.js\";\nimport React from 'react';\n\nclass displayText extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.checkText = () => {\n      const textNode = this.text_ref.current;\n\n      if (textNode.textContent == \"Open the menu to scan and add some text...\") {\n        textNode.textContent = \"\";\n        textNode.style.color = \"black\";\n      }\n    };\n\n    this.lostFocus = () => {\n      const textNode = this.text_ref.current;\n\n      if (textNode.textContent !== \"\" && textNode.textContent != this.text) {\n        this.text = textNode.textContent;\n      }\n\n      if (this.text == \"\") {\n        textNode.textContent = \"Open the menu to scan and add some text...\";\n        textNode.style.color = \"grey\";\n      }\n\n      this.forceUpdate();\n    };\n\n    this.text_ref = React.createRef();\n    this.text = \"\";\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      ref: this.text_ref,\n      className: \"mainText\",\n      onBlur: this.lostFocus,\n      onClick: this.checkText,\n      contentEditable: \"true\",\n      suppressContentEditableWarning: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"Open the menu to scan and add some text...\"));\n  }\n\n}\n\nexport default displayText;","map":{"version":3,"sources":["C:\\Users\\caleb\\Google Drive\\MSA\\notes_converter\\notes_converter_app\\src\\components\\displayText.js"],"names":["React","displayText","Component","constructor","props","checkText","textNode","text_ref","current","textContent","style","color","lostFocus","text","forceUpdate","createRef","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAN,SAA0BD,KAAK,CAACE,SAAhC,CAA0C;AAEtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAMnBC,SANmB,GAMP,MAAM;AACd,YAAMC,QAAQ,GAAG,KAAKC,QAAL,CAAcC,OAA/B;;AACA,UAAIF,QAAQ,CAACG,WAAT,IAAwB,4CAA5B,EAA0E;AACtEH,QAAAA,QAAQ,CAACG,WAAT,GAAuB,EAAvB;AACAH,QAAAA,QAAQ,CAACI,KAAT,CAAeC,KAAf,GAAuB,OAAvB;AACH;AACJ,KAZkB;;AAAA,SAcnBC,SAdmB,GAcP,MAAM;AACd,YAAMN,QAAQ,GAAG,KAAKC,QAAL,CAAcC,OAA/B;;AACA,UAAIF,QAAQ,CAACG,WAAT,KAAyB,EAAzB,IAA+BH,QAAQ,CAACG,WAAT,IAAwB,KAAKI,IAAhE,EAAsE;AAClE,aAAKA,IAAL,GAAYP,QAAQ,CAACG,WAArB;AACH;;AACD,UAAI,KAAKI,IAAL,IAAa,EAAjB,EAAqB;AACjBP,QAAAA,QAAQ,CAACG,WAAT,GAAuB,4CAAvB;AACAH,QAAAA,QAAQ,CAACI,KAAT,CAAeC,KAAf,GAAuB,MAAvB;AACH;;AACD,WAAKG,WAAL;AACH,KAxBkB;;AAEf,SAAKP,QAAL,GAAgBP,KAAK,CAACe,SAAN,EAAhB;AACA,SAAKF,IAAL,GAAY,EAAZ;AACH;;AAsBDG,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,GAAG,EAAE,KAAKT,QAAb;AAAuB,MAAA,SAAS,EAAC,UAAjC;AAA4C,MAAA,MAAM,EAAE,KAAKK,SAAzD;AAAoE,MAAA,OAAO,EAAE,KAAKP,SAAlF;AAA6F,MAAA,eAAe,EAAC,MAA7G;AAAoH,MAAA,8BAA8B,EAAE,IAApJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDADJ,CADJ;AAOH;;AApCqC;;AAuC1C,eAAeJ,WAAf","sourcesContent":["import React from 'react';\r\n\r\nclass displayText extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.text_ref = React.createRef();\r\n        this.text = \"\";\r\n    }\r\n\r\n    checkText = () => {\r\n        const textNode = this.text_ref.current;\r\n        if (textNode.textContent == \"Open the menu to scan and add some text...\") {\r\n            textNode.textContent = \"\";\r\n            textNode.style.color = \"black\";\r\n        }\r\n    }\r\n\r\n    lostFocus = () => {\r\n        const textNode = this.text_ref.current;\r\n        if (textNode.textContent !== \"\" && textNode.textContent != this.text) {\r\n            this.text = textNode.textContent;\r\n        }\r\n        if (this.text == \"\") {\r\n            textNode.textContent = \"Open the menu to scan and add some text...\";\r\n            textNode.style.color = \"grey\";\r\n        }\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p ref={this.text_ref} className=\"mainText\" onBlur={this.lostFocus} onClick={this.checkText} contentEditable=\"true\" suppressContentEditableWarning={true}>\r\n                    Open the menu to scan and add some text...\r\n                </p>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default displayText"]},"metadata":{},"sourceType":"module"}