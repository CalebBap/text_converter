{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\caleb\\\\Google Drive\\\\MSA\\\\text_converter\\\\text_converter_app\\\\src\\\\components\\\\displayText.js\";\nimport React from 'react';\n\nclass displayText extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.lostFocus = () => {\n      const textNode = this.text_ref.current;\n\n      if (textNode.textContent != global.scannedText) {\n        global.scannedText = textNode.textContent;\n        global.scannedTextState = true;\n      }\n\n      if (textNode.textContent == \"\") {\n        global.scannedText = \"Open the menu to scan and add some text...\";\n        textNode.textContent = global.scannedText;\n      }\n\n      this.forceUpdate();\n    };\n\n    this.clickText = () => {\n      const textNode = this.text_ref.current;\n\n      if (textNode.textContent === \"Open the menu to scan and add some text...\") {\n        log.d(\"Default Text\");\n        textNode.textContent = \"\";\n      }\n    };\n\n    this.text_ref = React.createRef();\n    this.text = \"Open the menu to scan and add some text...\";\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      ref: this.text_ref,\n      className: \"mainText\",\n      onBlur: this.lostFocus,\n      onClick: this.checkText,\n      contentEditable: \"true\",\n      suppressContentEditableWarning: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, global.scannedText));\n  }\n\n}\n\nexport default displayText;","map":{"version":3,"sources":["C:\\Users\\caleb\\Google Drive\\MSA\\text_converter\\text_converter_app\\src\\components\\displayText.js"],"names":["React","displayText","Component","constructor","props","lostFocus","textNode","text_ref","current","textContent","global","scannedText","scannedTextState","forceUpdate","clickText","log","d","createRef","text","render","checkText"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAN,SAA0BD,KAAK,CAACE,SAAhC,CAA0C;AAEtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAMnBC,SANmB,GAMP,MAAM;AACd,YAAMC,QAAQ,GAAG,KAAKC,QAAL,CAAcC,OAA/B;;AACA,UAAIF,QAAQ,CAACG,WAAT,IAAwBC,MAAM,CAACC,WAAnC,EAAgD;AAC5CD,QAAAA,MAAM,CAACC,WAAP,GAAqBL,QAAQ,CAACG,WAA9B;AACAC,QAAAA,MAAM,CAACE,gBAAP,GAA0B,IAA1B;AACH;;AACD,UAAIN,QAAQ,CAACG,WAAT,IAAwB,EAA5B,EAAgC;AAC5BC,QAAAA,MAAM,CAACC,WAAP,GAAqB,4CAArB;AACAL,QAAAA,QAAQ,CAACG,WAAT,GAAuBC,MAAM,CAACC,WAA9B;AACH;;AACD,WAAKE,WAAL;AACH,KAjBkB;;AAAA,SAmBnBC,SAnBmB,GAmBP,MAAM;AACd,YAAMR,QAAQ,GAAG,KAAKC,QAAL,CAAcC,OAA/B;;AACA,UAAIF,QAAQ,CAACG,WAAT,KAAyB,4CAA7B,EAA2E;AACvEM,QAAAA,GAAG,CAACC,CAAJ,CAAM,cAAN;AACAV,QAAAA,QAAQ,CAACG,WAAT,GAAuB,EAAvB;AACH;AACJ,KAzBkB;;AAEf,SAAKF,QAAL,GAAgBP,KAAK,CAACiB,SAAN,EAAhB;AACA,SAAKC,IAAL,GAAY,4CAAZ;AACH;;AAuBDC,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,GAAG,EAAE,KAAKZ,QAAb;AAAuB,MAAA,SAAS,EAAC,UAAjC;AAA4C,MAAA,MAAM,EAAE,KAAKF,SAAzD;AAAoE,MAAA,OAAO,EAAE,KAAKe,SAAlF;AAA6F,MAAA,eAAe,EAAC,MAA7G;AAAoH,MAAA,8BAA8B,EAAE,IAApJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKV,MAAM,CAACC,WADZ,CADJ,CADJ;AAOH;;AArCqC;;AAwC1C,eAAeV,WAAf","sourcesContent":["import React from 'react';\r\n\r\nclass displayText extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.text_ref = React.createRef();\r\n        this.text = \"Open the menu to scan and add some text...\";\r\n    }\r\n\r\n    lostFocus = () => {\r\n        const textNode = this.text_ref.current;\r\n        if (textNode.textContent != global.scannedText) {\r\n            global.scannedText = textNode.textContent;\r\n            global.scannedTextState = true;\r\n        }\r\n        if (textNode.textContent == \"\") {\r\n            global.scannedText = \"Open the menu to scan and add some text...\";\r\n            textNode.textContent = global.scannedText;\r\n        }\r\n        this.forceUpdate();\r\n    }\r\n\r\n    clickText = () => {\r\n        const textNode = this.text_ref.current;\r\n        if (textNode.textContent === \"Open the menu to scan and add some text...\") {\r\n            log.d(\"Default Text\");\r\n            textNode.textContent = \"\";\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p ref={this.text_ref} className=\"mainText\" onBlur={this.lostFocus} onClick={this.checkText} contentEditable=\"true\" suppressContentEditableWarning={true}>\r\n                    {global.scannedText}\r\n                </p>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default displayText"]},"metadata":{},"sourceType":"module"}