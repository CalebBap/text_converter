{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\caleb\\\\Google Drive\\\\MSA\\\\text_converter\\\\text_converter_app\\\\src\\\\components\\\\webcamComponent.js\";\nimport React from 'react';\nimport Webcam from \"react-webcam\";\n\nclass webcamComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setRef = webcam => {\n      this.webcam = webcam;\n    };\n\n    this.captureImage = () => {\n      const image = this.webcam.getScreenshot();\n      const imageArray = this.convertToByteArray(image);\n      this.fetchData(imageArray);\n    };\n\n    this.convertToByteArray = image => {\n      const base64 = require('base64-js');\n\n      const base64string = image.split(',')[1];\n      return base64.toByteArray(base64string);\n    };\n\n    this.fetchData = imageArray => {\n      const apiKey = '062522cd19d548218826e12756809e84';\n      const apiEndpoint = 'https://australiaeast.api.cognitive.microsoft.com/vision/v2.0/ocr?language=en';\n      fetch(apiEndpoint, {\n        body: imageArray,\n        headers: {\n          'Ocp-Apim-Subscription-Key': apiKey,\n          'Content-Type': 'application/octet-stream'\n        },\n        method: 'POST'\n      }).then(response => {\n        if (response.ok) {\n          response.json().then(data => {\n            if (data.regions.length > 0) {\n              if (global.scannedTextState == false) {\n                global.scannedText = '';\n                global.scannedTextState = true;\n              } else {\n                global.scannedText += '\\n';\n              }\n\n              for (const contents of data.regions[0].lines) {\n                for (const text of contents.words) {\n                  global.scannedText += text.text + \" \";\n                }\n\n                global.scannedText += '\\n';\n              }\n            } else {\n              window.confirm(\"No text was detected. Please try again.\");\n            }\n          });\n        }\n      });\n    };\n\n    this.state = {\n      width: 0,\n      height: 0\n    };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    this.setState({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  } // setRef is used to create a reference to the webcam DOM node so that it can be accessed directly\n\n\n  render() {\n    const videoConstraints = {\n      width: 1920,\n      height: 1080,\n      facingMode: \"user\"\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"takePicButton\",\n      variant: \"primary\",\n      onClick: this.captureImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Capture Image\"), React.createElement(\"div\", {\n      className: \"webcamVideo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Webcam, {\n      audio: false,\n      height: this.state.height,\n      width: this.state.width,\n      ref: this.setRef,\n      screenshotFormat: \"image/jpeg\",\n      screenshotQuality: 1,\n      videoConstraints: videoConstraints,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default webcamComponent;","map":{"version":3,"sources":["C:\\Users\\caleb\\Google Drive\\MSA\\text_converter\\text_converter_app\\src\\components\\webcamComponent.js"],"names":["React","Webcam","webcamComponent","Component","constructor","props","setRef","webcam","captureImage","image","getScreenshot","imageArray","convertToByteArray","fetchData","base64","require","base64string","split","toByteArray","apiKey","apiEndpoint","fetch","body","headers","method","then","response","ok","json","data","regions","length","global","scannedTextState","scannedText","contents","lines","text","words","window","confirm","state","width","height","updateWindowDimensions","bind","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","setState","innerWidth","innerHeight","render","videoConstraints","facingMode"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Webcam from \"react-webcam\";\r\n\r\nclass webcamComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { width: 0, height: 0 };\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    updateWindowDimensions() {\r\n        this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n    }\r\n\r\n    // setRef is used to create a reference to the webcam DOM node so that it can be accessed directly\r\n    setRef = webcam => {\r\n        this.webcam = webcam;\r\n    }\r\n\r\n    captureImage = () => {\r\n        const image = this.webcam.getScreenshot();\r\n        const imageArray = this.convertToByteArray(image);\r\n        this.fetchData(imageArray);\r\n    }\r\n\r\n    // this function converts base64 encoded string representation of image into an array of binary data\r\n    convertToByteArray = (image) => {\r\n        const base64 = require('base64-js');\r\n        const base64string = image.split(',')[1];\r\n        return base64.toByteArray(base64string)\r\n    }\r\n\r\n    fetchData = (imageArray) => {\r\n        const apiKey = '062522cd19d548218826e12756809e84';\r\n        const apiEndpoint = 'https://australiaeast.api.cognitive.microsoft.com/vision/v2.0/ocr?language=en';\r\n        fetch(apiEndpoint, {\r\n            body: imageArray,\r\n            headers: {\r\n                'Ocp-Apim-Subscription-Key': apiKey, 'Content-Type': 'application/octet-stream'\r\n            },\r\n            method: 'POST'\r\n        }).then(response => {\r\n            if (response.ok) {\r\n                response.json().then(data => {\r\n                    if (data.regions.length > 0) {\r\n                        if (global.scannedTextState == false) {\r\n                            global.scannedText = '';\r\n                            global.scannedTextState = true;\r\n                        } else {\r\n                            global.scannedText += '\\n';\r\n                        }\r\n                        for (const contents of data.regions[0].lines) {\r\n                            for (const text of contents.words) {\r\n                                global.scannedText += text.text + \" \";\r\n\r\n                            }\r\n                            global.scannedText += '\\n';\r\n                        }\r\n                    } else {\r\n                        window.confirm(\"No text was detected. Please try again.\");\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const videoConstraints = {\r\n            width: 1920,\r\n            height: 1080,\r\n            facingMode: \"user\"\t\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <button className=\"takePicButton\" variant=\"primary\" onClick={this.captureImage}>Capture Image</button>\r\n                <div className=\"webcamVideo\">\r\n                    <Webcam\r\n                        audio={false}\r\n                        height={this.state.height}\r\n                        width={this.state.width}\r\n                        ref={this.setRef}\r\n                        screenshotFormat=\"image/jpeg\"\r\n                        screenshotQuality={1}\r\n                        videoConstraints={videoConstraints}\r\n                    />\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default webcamComponent"]},"metadata":{},"sourceType":"module"}