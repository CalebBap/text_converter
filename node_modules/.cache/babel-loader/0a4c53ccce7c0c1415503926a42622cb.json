{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\caleb\\\\Google Drive\\\\MSA\\\\notes_converter\\\\notes_converter_app\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './components/stylesheet.css';\nimport WebcamComponent from './components/webcamComponent';\nimport DisplayText from './components/displayText';\nimport hamButton from './hamButton.png';\nimport crossButton from './crossButton.png';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeScreen = () => {\n      switch (this.screen) {\n        case 0:\n          this.screen += 1;\n          break;\n\n        case 1:\n          this.screen -= 1;\n          break;\n\n        default:\n          break;\n      }\n\n      this.showHamButton();\n      this.forceUpdate();\n    };\n\n    this.getScreen = () => {\n      return this.screen;\n    };\n\n    this.getMenuState = () => {\n      return this.menuState;\n    };\n\n    this.showHamButton = () => {\n      const hamNode = this.ham_button_ref.current;\n      const menuNode = this.menu_ref.current;\n      hamNode.style.visibility = \"visible\";\n      menuNode.style.visibility = \"hidden\";\n      this.forceUpdate();\n    };\n\n    this.showMenu = () => {\n      const hamNode = this.ham_button_ref.current;\n      const menuNode = this.menu_ref.current;\n      hamNode.style.visibility = \"hidden\";\n      menuNode.style.visibility = \"visible\";\n      this.forceUpdate();\n    };\n\n    this.getTextState = () => {\n      return this.textState;\n    };\n\n    this.setText = () => {\n      console.log(\"setText()\");\n      const textNode = this.text_ref.current;\n      textNode.style.visibility = \"hidden\";\n\n      if (this.textState) {\n        textNode.style.color = \"black\";\n      } else {\n        textNode.style.color = \"grey\";\n      }\n    };\n\n    this.selectText = () => {\n      console.log(\"Selecting all Text\");\n      const textNode = this.text_ref.current;\n      document.execCommand(\"copy\", true, null);\n    };\n\n    this.copyText = () => {\n      // UNUSED RN\n      this.textState = false;\n      this.text = \"Open the menu to add some text...\";\n      this.setText();\n    };\n\n    this.screen = 0;\n    this.ham_button_ref = React.createRef();\n    this.cross_button_ref = React.createRef();\n    this.menu_ref = React.createRef();\n    this.text_ref = React.createRef();\n    this.textState = false;\n    this.text = \"Open the menu to add some text...\";\n  }\n\n  render() {\n    const screen = this.getScreen();\n    const menuState = this.getMenuState(); //const textState = this.getTextState();\n\n    if (screen === 0) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(DisplayText, {\n        ref: this.text_ref,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        ref: this.ham_button_ref,\n        className: \"hamImage\",\n        src: hamButton,\n        onClick: this.showMenu,\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        ref: this.menu_ref,\n        className: \"menu\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        ref: this.cross_button_ref,\n        className: \"crossImage\",\n        src: crossButton,\n        onClick: this.showHamButton,\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"menuText\",\n        id: \"menuOne\",\n        onClick: this.changeScreen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Scan Text\"), React.createElement(\"p\", {\n        className: \"menuText\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"View Text\"), React.createElement(\"p\", {\n        className: \"menuText\",\n        onClick: this.selectText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Select All Text\")));\n    }\n\n    if (screen === 1) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        ref: this.ham_button_ref,\n        className: \"hamImage\",\n        src: hamButton,\n        onClick: this.showMenu,\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        ref: this.menu_ref,\n        className: \"menu\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        ref: this.cross_button_ref,\n        className: \"crossImage\",\n        src: crossButton,\n        onClick: this.showHamButton,\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        className: \"menuText\",\n        id: \"menuOne\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Scan Text\"), React.createElement(\"p\", {\n        className: \"menuText\",\n        onClick: this.changeScreen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"View Text\"), React.createElement(\"p\", {\n        className: \"menuText\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"Select All Text\")), React.createElement(\"div\", {\n        className: \"webcamContainer\",\n        visibility: \"visible\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(WebcamComponent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      })));\n    }\n\n    this.setText(); // NOT WORKING\n\n    if (menuState) {\n      this.showMenu();\n    } else {\n      this.showHamButton();\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\caleb\\Google Drive\\MSA\\notes_converter\\notes_converter_app\\src\\App.js"],"names":["React","Component","WebcamComponent","DisplayText","hamButton","crossButton","App","constructor","props","changeScreen","screen","showHamButton","forceUpdate","getScreen","getMenuState","menuState","hamNode","ham_button_ref","current","menuNode","menu_ref","style","visibility","showMenu","getTextState","textState","setText","console","log","textNode","text_ref","color","selectText","document","execCommand","copyText","text","createRef","cross_button_ref","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,6BAAP;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;;AAEA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAExBM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAWnBC,YAXmB,GAWJ,MAAM;AACjB,cAAQ,KAAKC,MAAb;AACI,aAAK,CAAL;AACI,eAAKA,MAAL,IAAe,CAAf;AACA;;AACJ,aAAK,CAAL;AACI,eAAKA,MAAL,IAAe,CAAf;AACA;;AACJ;AACI;AARR;;AAUA,WAAKC,aAAL;AACA,WAAKC,WAAL;AACH,KAxBkB;;AAAA,SA0BnBC,SA1BmB,GA0BP,MAAM;AACd,aAAO,KAAKH,MAAZ;AACH,KA5BkB;;AAAA,SA8BnBI,YA9BmB,GA8BJ,MAAM;AACjB,aAAO,KAAKC,SAAZ;AACH,KAhCkB;;AAAA,SAkCnBJ,aAlCmB,GAkCH,MAAM;AAClB,YAAMK,OAAO,GAAG,KAAKC,cAAL,CAAoBC,OAApC;AACA,YAAMC,QAAQ,GAAG,KAAKC,QAAL,CAAcF,OAA/B;AACAF,MAAAA,OAAO,CAACK,KAAR,CAAcC,UAAd,GAA2B,SAA3B;AACAH,MAAAA,QAAQ,CAACE,KAAT,CAAeC,UAAf,GAA4B,QAA5B;AACA,WAAKV,WAAL;AACH,KAxCkB;;AAAA,SA0CnBW,QA1CmB,GA0CR,MAAM;AACb,YAAMP,OAAO,GAAG,KAAKC,cAAL,CAAoBC,OAApC;AACA,YAAMC,QAAQ,GAAG,KAAKC,QAAL,CAAcF,OAA/B;AACAF,MAAAA,OAAO,CAACK,KAAR,CAAcC,UAAd,GAA2B,QAA3B;AACAH,MAAAA,QAAQ,CAACE,KAAT,CAAeC,UAAf,GAA4B,SAA5B;AACA,WAAKV,WAAL;AACH,KAhDkB;;AAAA,SAkDnBY,YAlDmB,GAkDJ,MAAM;AACjB,aAAO,KAAKC,SAAZ;AACH,KApDkB;;AAAA,SAsDnBC,OAtDmB,GAsDT,MAAM;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,YAAMC,QAAQ,GAAG,KAAKC,QAAL,CAAcZ,OAA/B;AACAW,MAAAA,QAAQ,CAACR,KAAT,CAAeC,UAAf,GAA4B,QAA5B;;AACA,UAAI,KAAKG,SAAT,EAAoB;AAChBI,QAAAA,QAAQ,CAACR,KAAT,CAAeU,KAAf,GAAuB,OAAvB;AACH,OAFD,MAEO;AACHF,QAAAA,QAAQ,CAACR,KAAT,CAAeU,KAAf,GAAuB,MAAvB;AACH;AACJ,KA/DkB;;AAAA,SAiEnBC,UAjEmB,GAiEN,MAAM;AACfL,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,YAAMC,QAAQ,GAAG,KAAKC,QAAL,CAAcZ,OAA/B;AACAe,MAAAA,QAAQ,CAACC,WAAT,CAAqB,MAArB,EAA6B,IAA7B,EAAmC,IAAnC;AACH,KArEkB;;AAAA,SAuEnBC,QAvEmB,GAuER,MAAM;AAAE;AACf,WAAKV,SAAL,GAAiB,KAAjB;AACA,WAAKW,IAAL,GAAY,mCAAZ;AACA,WAAKV,OAAL;AACH,KA3EkB;;AAEf,SAAKhB,MAAL,GAAc,CAAd;AACA,SAAKO,cAAL,GAAsBjB,KAAK,CAACqC,SAAN,EAAtB;AACA,SAAKC,gBAAL,GAAwBtC,KAAK,CAACqC,SAAN,EAAxB;AACA,SAAKjB,QAAL,GAAgBpB,KAAK,CAACqC,SAAN,EAAhB;AACA,SAAKP,QAAL,GAAgB9B,KAAK,CAACqC,SAAN,EAAhB;AACA,SAAKZ,SAAL,GAAiB,KAAjB;AACA,SAAKW,IAAL,GAAY,mCAAZ;AACH;;AAoEDG,EAAAA,MAAM,GAAG;AACL,UAAM7B,MAAM,GAAG,KAAKG,SAAL,EAAf;AACA,UAAME,SAAS,GAAG,KAAKD,YAAL,EAAlB,CAFK,CAGL;;AAEA,QAAIJ,MAAM,KAAK,CAAf,EAAkB;AACd,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,WAAD;AAAa,QAAA,GAAG,EAAE,KAAKoB,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAK,QAAA,GAAG,EAAE,KAAKb,cAAf;AAA+B,QAAA,SAAS,EAAC,UAAzC;AAAoD,QAAA,GAAG,EAAEb,SAAzD;AAAoE,QAAA,OAAO,EAAE,KAAKmB,QAAlF;AAA4F,QAAA,GAAG,EAAC,EAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI;AAAK,QAAA,GAAG,EAAE,KAAKH,QAAf;AAAyB,QAAA,SAAS,EAAC,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,GAAG,EAAE,KAAKkB,gBAAf;AAAiC,QAAA,SAAS,EAAC,YAA3C;AAAwD,QAAA,GAAG,EAAEjC,WAA7D;AAA0E,QAAA,OAAO,EAAE,KAAKM,aAAxF;AAAuG,QAAA,GAAG,EAAC,EAA3G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAG,QAAA,SAAS,EAAC,UAAb;AAAwB,QAAA,EAAE,EAAC,SAA3B;AAAqC,QAAA,OAAO,EAAE,KAAKF,YAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFJ,EAGI;AAAG,QAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAHJ,EAII;AAAG,QAAA,SAAS,EAAC,UAAb;AAAwB,QAAA,OAAO,EAAE,KAAKuB,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAJJ,CAHJ,CADJ;AAYH;;AACD,QAAItB,MAAM,KAAK,CAAf,EAAkB;AACd,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,GAAG,EAAE,KAAKO,cAAf;AAA+B,QAAA,SAAS,EAAC,UAAzC;AAAoD,QAAA,GAAG,EAAEb,SAAzD;AAAoE,QAAA,OAAO,EAAE,KAAKmB,QAAlF;AAA4F,QAAA,GAAG,EAAC,EAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAK,QAAA,GAAG,EAAE,KAAKH,QAAf;AAAyB,QAAA,SAAS,EAAC,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,GAAG,EAAE,KAAKkB,gBAAf;AAAiC,QAAA,SAAS,EAAC,YAA3C;AAAwD,QAAA,GAAG,EAAEjC,WAA7D;AAA0E,QAAA,OAAO,EAAE,KAAKM,aAAxF;AAAuG,QAAA,GAAG,EAAC,EAA3G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAG,QAAA,SAAS,EAAC,UAAb;AAAwB,QAAA,EAAE,EAAC,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFJ,EAGI;AAAG,QAAA,SAAS,EAAC,UAAb;AAAwB,QAAA,OAAO,EAAE,KAAKF,YAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAHJ,EAII;AAAG,QAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAJJ,CAFJ,EAQI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAiC,QAAA,UAAU,EAAC,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CARJ,CADJ;AAcH;;AAED,SAAKiB,OAAL,GApCK,CAoCY;;AAEjB,QAAIX,SAAJ,EAAe;AACX,WAAKQ,QAAL;AACH,KAFD,MAEO;AACH,WAAKZ,aAAL;AACH;AACJ;;AA1HuB;;AA6H5B,eAAeL,GAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport './components/stylesheet.css';\r\nimport WebcamComponent from './components/webcamComponent'\r\nimport DisplayText from './components/displayText'\r\nimport hamButton from './hamButton.png';\r\nimport crossButton from './crossButton.png';\r\n\r\nclass App extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.screen = 0;\r\n        this.ham_button_ref = React.createRef();\r\n        this.cross_button_ref = React.createRef();\r\n        this.menu_ref = React.createRef();\r\n        this.text_ref = React.createRef();\r\n        this.textState = false;\r\n        this.text = \"Open the menu to add some text...\"\r\n    }\r\n\r\n    changeScreen = () => {\r\n        switch (this.screen) {\r\n            case 0:\r\n                this.screen += 1;\r\n                break\r\n            case 1:\r\n                this.screen -= 1;\r\n                break\r\n            default:\r\n                break\r\n        }\r\n        this.showHamButton();\r\n        this.forceUpdate();\r\n    }\r\n\r\n    getScreen = () => {\r\n        return this.screen;\r\n    }\r\n\r\n    getMenuState = () => {\r\n        return this.menuState;\r\n    }\r\n\r\n    showHamButton = () => {\r\n        const hamNode = this.ham_button_ref.current;\r\n        const menuNode = this.menu_ref.current;\r\n        hamNode.style.visibility = \"visible\";\r\n        menuNode.style.visibility = \"hidden\";\r\n        this.forceUpdate();\r\n    }\r\n\r\n    showMenu = () => {\r\n        const hamNode = this.ham_button_ref.current;\r\n        const menuNode = this.menu_ref.current;\r\n        hamNode.style.visibility = \"hidden\";\r\n        menuNode.style.visibility = \"visible\";\r\n        this.forceUpdate();\r\n    }\r\n\r\n    getTextState = () => {\r\n        return this.textState;\r\n    }\r\n\r\n    setText = () => {\r\n        console.log(\"setText()\");\r\n        const textNode = this.text_ref.current;\r\n        textNode.style.visibility = \"hidden\";\r\n        if (this.textState) {\r\n            textNode.style.color = \"black\";\r\n        } else {\r\n            textNode.style.color = \"grey\";\r\n        }\r\n    }\r\n\r\n    selectText = () => {\r\n        console.log(\"Selecting all Text\");\r\n        const textNode = this.text_ref.current;\r\n        document.execCommand(\"copy\", true, null);\r\n    }\r\n\r\n    copyText = () => { // UNUSED RN\r\n        this.textState = false;\r\n        this.text = \"Open the menu to add some text...\";\r\n        this.setText();\r\n    }\r\n\r\n    render() {\r\n        const screen = this.getScreen();\r\n        const menuState = this.getMenuState();\r\n        //const textState = this.getTextState();\r\n\r\n        if (screen === 0) {\r\n            return (\r\n                <div >\r\n                    <DisplayText ref={this.text_ref} /> \r\n                    <img ref={this.ham_button_ref} className=\"hamImage\" src={hamButton} onClick={this.showMenu} alt=\"\" />\r\n                    <div ref={this.menu_ref} className=\"menu\">\r\n                        <img ref={this.cross_button_ref} className=\"crossImage\" src={crossButton} onClick={this.showHamButton} alt=\"\" />\r\n                        <p className=\"menuText\" id=\"menuOne\" onClick={this.changeScreen}>Scan Text</p>\r\n                        <p className=\"menuText\">View Text</p>\r\n                        <p className=\"menuText\" onClick={this.selectText}>Select All Text</p>\r\n                    </div>\r\n                </div >\r\n            );\r\n        }\r\n        if (screen === 1) {\r\n            return (\r\n                <div >\r\n                    <img ref={this.ham_button_ref} className=\"hamImage\" src={hamButton} onClick={this.showMenu} alt=\"\" />\r\n                    <div ref={this.menu_ref} className=\"menu\">\r\n                        <img ref={this.cross_button_ref} className=\"crossImage\" src={crossButton} onClick={this.showHamButton} alt=\"\" />\r\n                        <p className=\"menuText\" id=\"menuOne\" >Scan Text</p>\r\n                        <p className=\"menuText\" onClick={this.changeScreen}>View Text</p>\r\n                        <p className=\"menuText\" >Select All Text</p>\r\n                    </div>\r\n                    <div className=\"webcamContainer\" visibility=\"visible\">\r\n                        <WebcamComponent />\r\n                    </div>\r\n                </div >\r\n            );\r\n        }\r\n\r\n        this.setText() ; // NOT WORKING\r\n\r\n        if (menuState) {\r\n            this.showMenu() ;\r\n        } else {\r\n            this.showHamButton() ;\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}